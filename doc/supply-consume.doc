Hierarchical node supply & consume
---

Take some node N. Its immediate children (subnodes) can be:

  - explicitly supplied by some reactive procedures
  - created just for the sake of individual consumption, i.e. unsupplied
  - anything of the 2 but for some nested descendants.

Consumption:

  - node-level: whether this particular node exists
  - plane-level: I want to know about all of this planes nodes.

Supplying is different, it's not 1-vs-many as with consumption. Nodes are always supplied
individually, i.e. there's no plane-level supply. But we have lazy supply, or inference
rules, that come into action when someone is explicitly consuming what they say they can
supply.

Fact 1: if we have an inference rule with the head "D.one(*).two(*).three(*)" and "D.one
(1).two(*)" is consumed, then we have to run this rule, because it can
supply "D.one.two" -- what we need. Even though it supplies more than we require
(deeper structure).


```js
rv.infer(
  D.country(v.Cr).city(v.Cy),
  D.city(v.Cy).country(v.Cr)
);

```

```js

D.product(Product).onDate(Date).soldAtSale(Sale)

```


Fact 2: even if we only have node-level consumers, we still need to run all the inference
rules that claim to supply into this plane. Because any of them may supply the subnode
that the consumer is interested in.

So, any consumption at all activates all the plane's lazy suppliers.


Do we need deep plane-level consumers?
---

For example, at a concrete node C: A -> B -> C, we consume the suffix ".D.E.F". Meaning
that we need all D's, E's and F's.

Do we need to have the explicit prefix part and suffix part in a rule?

```js
rv.infer(
  D.product(v`Product`).onDate(v`Date`),
  _.soldAtSale(v`Sale`, rv.do(
    v`Product`.event(v`Event`),
    v`Event`.sale(v`Sale`),
    v`Date` < v`Sale`.saleEnd,
    v`Date` > v`Sale`.saleStart
  ))
);
```

So there can be 3 cases w.r.t. deep supplying:

  1. Don't supply intermediate nodes, i.e. supply only starting from some nesting.
  2. Supply some chain of intermediate nodes, like with `.D().E().F()` above.

Only the leaf node is actually supplied. All the intermediate nodes are supplied
indirectly. When at any intermediate level there's any consumption, we run the whole
rule (at the deepest level, where is the actual body attached).

  3. Supply separately at various levels. This is in fact multiple inference rules merged
  into one. But they still share the variable namespace.



Preventing cycles
---

We may have cycles. Node A gives life to node B through some rule, then the node B
supplies back A increasing its supply count (through the same or another rule) to A.
Generally, these vicious circles may be more than 2 links long. How do we deal with this
sort of problem?

With node instantiations. (NO)

Iteration is a plane consumer. It cares about being notified of the plane changes, i.e.
which nodes were added and which were deleted since the previous time it was notified.

Node supply and consume:

[S1] - C1 - S2 - C2 - S3 - C3 - ...

The point is that a node is first supplied by someone (1 time or many), then we have some
consumptions, including plane consumption. And these consumptions depend on preceding
supplies, not the following ones.

The problem is that this is node-based (individual) not plane-based (multiple). 


Update: no node instantiations. This is now taken care of with main supporters.
